#remove weird NAs
dat <- dat[!gr == ""]
#create a midden ID
dat[, midden := paste0(gr, "_", reflo)]
dat <- dat[squirrel_id %in% c("12", "13", "22", "55")]
dat <- fread("input/MiddenConeCounts.csv")
#RENAME COLS
setnames(dat, "total_old", "total_old_8")
setnames(dat, "total_new", "total_new_8")
#GRAB ALL COLUMNS WITH OLD AND NEW
oldcols <- grep("old", names(dat), value = TRUE)
newcols <- grep("new", names(dat), value = TRUE)
#Explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
#remove weird NAs
dat <- dat[!gr == ""]
#create a midden ID
dat[, midden := paste0(gr, "_", reflo)]
dt <- dat[, .(squirrel_id, midden, year, oldcols, newcols)]
View(dt)
newcols
dt <- dat[, c(newcols)]
View(dat)
dat <- fread("input/MiddenConeCounts.csv")
View(dat)
grep("old", names(dat), value = TRUE)
#GRAB ALL COLUMNS WITH OLD AND NEW
oldcols <- grep("old", names(dat))
grep("old", names(dat))
grep("new", names(dat))
dat <- dat[, 21:38]
View(dat)
dat <- fread("input/MiddenConeCounts.csv")
dat <- dat[, 21:36]
View(dat)
dat <- fread("input/MiddenConeCounts.csv")
dat <- dat[, (1, 2, 5, 8, 21:36)]
dat <- dat[, .(1, 2, 5, 8, 21:36)]
View(dat)
dat <- dat[, .(1, 2, 5, 8, 21:36)]
dat <- fread("input/MiddenConeCounts.csv")
dat <- dat[, .(1, 2, 5, 8, 21:36)]
View(dat)
dat <- dat[, .(1 + 2 + 5 + 8 + 21:36)]
View(dat)
dat <- fread("input/MiddenConeCounts.csv")
dat <- dat[, .(1 + 2 + 5 + 8 + 21:36)]
dat <- fread("input/MiddenConeCounts.csv")
dat <- dat[, 1 + 2 + 5 + 8 + 21:36]
dat <- fread("input/MiddenConeCounts.csv")
View(dat)
dat[, grep("total", names(dat)) := NULL ]
View(dat)
#GRAB ALL COLUMNS WITH OLD AND NEW
oldcols <- grep("old", names(dat))
newcols <- grep("new", names(dat))
#GRAB ALL COLUMNS WITH OLD AND NEW
oldcols <- grep("old", names(dat))
newcols <- grep("new", names(dat))
#Explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
oldcols
#GRAB ALL COLUMNS WITH OLD AND NEW
oldcols <- grep("old", names(dat), value = TRUE)
newcols <- grep("new", names(dat), value = TRUE)
oldcols
#Explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
#remove weird NAs
dat <- dat[!gr == ""]
#create a midden ID
dat[, midden := paste0(gr, "_", reflo)]
#GRAB ALL COLUMNS WITH OLD AND NEW
oldcols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
conecols
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "Quadrat")
str(dat)
#reclassify
dat[, conecols]
#reclassify
dat[, .(conecols)]
#reclassify
dat[, .(conecols) := as.integer(.(conecols))]
#reclassify
dat[, .(conecols) := as.integer(conecols]
#reclassify
dat[, .(conecols) := as.integer(conecols)]
View(meltdat)
#reclassify
dat[, .(Q1B_old, Q1B_new) := as.integer(Q1B_old, Q1B_new)]
#reclassify
dat[, .(Q1B_old, Q1B_new) := as.integer(.(Q1B_old, Q1B_new))]
#reclassify
dat[, Q1B_old := as.integer(Q1B_old))]
#reclassify
dat[, Q1B_old := as.integer(Q1B_old)]
View(dat)
library(dplyr)
dat <- fread("input/MiddenConeCounts.csv")
#get rid of totals
dat[, grep("total", names(dat)) := NULL ]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
dat <- dat %>% mutate_at(conecols, as.numeric)
View(dat)
#Explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
#remove weird NAs
dat <- dat[!gr == ""]
#create a midden ID
dat[, midden := paste0(gr, "_", reflo)]
str(dat)
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "Quadrat")
View(meltdat)
View(meltdat)
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
dat <- meltdat[, .(year, midden, squirrel_id, quadrat, count)]
dt <- meltdat[, .(year, midden, squirrel_id, quadrat, count)]
View(dt)
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
str(meltdat)
library(lubridate)
dat <- fread("input/MiddenConeCounts.csv")
#get rid of totals
dat[, grep("total", names(dat)) := NULL ]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#convert all cone cols to be numeric
dat <- dat %>% mutate_at(conecols, as.numeric)
#Explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
#remove weird NAs
dat <- dat[!gr == ""]
#create a midden ID
dat[, midden := paste0(gr, "_", reflo)]
#make year a year
dat[, year(Year)]
#make year a year
dat[, Year := year(Year)]
#make year a year
dat[, Year := as.numeric(Year)]
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
View(meltdat)
dt <- meltdat[, .(year, midden, squirrel_id, quadrat, count)]
View(dt)
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
View(dt)
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
View(dt)
dat[, gsub(c("old", "new"), quadrat, "")]
dat[, sub(c("old", "new"), c("", ""), quadrat)]
dat[, gsub(c("old", "new"), quadrat, c("", ""))]
dt[, gsub(c("old", "new"), quadrat, c("", ""))]
View(dt)
View(dat)
View(dt)
dt[, gsub("old", quadrat, "")]
#subset
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
dt[, gsub("old", quadrat, "")]
View(dt)
#subset
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
dt[, gsub("_old", quadrat, "")]
dt[, gsub("_old", quadrat, " ")]
#subset
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
dt[, gsub("_old", quadrat, " ")]
dt[, quadrat := gsub("_old", "", quadrat)]
View(dt)
#subset
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
dt[, quadrat := gsub(c("_old", "_new"), c("", ""), quadrat)]
dt[, quadrat := gsub(c("_old", "_new"), c(" ", " "), quadrat)]
View(dt)
#subset
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
dt[, quadrat := gsub(c("_old", "_new"), c(" ", " "), quadrat)]
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
#subset
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
View(dt)
View(dt)
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
View(dt)
dt[, unique(quadrat)]
View(dt)
dt <- setorder(midden)
dt <- setorder(dt$midden)
dt <- setorder(dt, midden)
View(dt)
dt <- setorder(dt, cols = (midden, year))
dt <- setorder(dt, midden, year)
dt <- setorder(dt, midden, Year)
View(dt)
#subset
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
#make age of cones its own column
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
#remove age from quadrat name
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
dt <- setorder(dt, midden, Year)
View(dt)
View(dt)
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id, age)]
View(all_8)
all_8 <- dt[, sum := sum(count), by = .(Year, midden, squirrel_id, age)]
View(all_8)
all_8 <- dt[, conecount := sum(count), by = .(Year, midden, squirrel_id, age)]
View(all_8)
View(dat)
dat <- fread("input/MiddenConeCounts.csv")
#create a midden ID
dat[, midden := paste0(gr, "_", reflo)]
View(dat)
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id, age)]
View(all_8)
dt[, sum(count), by = .(Year, midden, squirrel_id, age)]
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id, age)]
setnames(all_8, "V1", "conecount")
View(all_8)
View(dt)
dat <- fread("input/MiddenConeCounts.csv")
#get rid of totals
dat[, grep("total", names(dat)) := NULL ]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#convert all cone cols to be numeric
dat <- dat %>% mutate_at(conecols, as.numeric)
#Explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
#remove weird NAs
dat <- dat[!gr == ""]
#create a midden ID
dat[, midden := paste0(gr, "_", reflo)]
#make year a year
dat[, Year := as.numeric(Year)]
# create new data frame ---------------------------------------------------
#melt down
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
#subset
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
#make age of cones its own column
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
#remove age from quadrat name
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
dt <- setorder(dt, midden, Year)
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id, age)]
setnames(all_8, "V1", "conecount")
View(dat)
View(dt)
View(all_8)
sample(dt$midden, 1)
testmid <- sample(dt$midden, 1)
test <- dt[midden %in% testmid]
View(test)
quads <- test[, unique(quadrat)]
samplequads <- sample(quads, 4, replace = FALSE)
test2 <- test[quadrat %in% samplequads]
View(test2)
quads <- test[, unique(quadrat)]
View(test2)
test2[, sum(count)]
test2[, sum(count), age]
test2[age == "old", sum(count)]
test2[age == "old", sum(count)]
test2[, sum(count)]
test[, sum(count)]
test2[, sum(count)]
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
sumcones <- subset[, sum(countcol)]
return(sumcones)
}
test[, sum(count)]
test2[, sum(count)]
randomcount4(cd = test, samplecol = quadrat, countcol = count)
randomcount4(cd = test, samplecol = "quadrat", countcol = "count")
View(test)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
sumcones <- subset[, sum(countcol)]
return(sumcones)
}
quads <- test[, unique(quadrat)]
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
sumcones <- subset[, sum(countcol)]
return(sumcones)
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
View(test)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
#samplequads <- sample(quads, 4, replace = FALSE)
#subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(quads)
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
#subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(samplequads)
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
sumcones <- subset[, sum(countcol)]
return(sumcones)
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset[, sum(countcol)])
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset[, sum(count)])
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset[, sum(count)])
}
randomcount4(cd = test, samplecol = test$quadrat)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
#return(subset[, sum(count)])
return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat)
return(subset[, sum(count)])
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset[, sum(count)])
#return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset[, sum(count)])
return(subset)
#return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
#return(subset[, sum(count)])
return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat)
View(test)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
#return(subset[, sum(count)])
return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
return(subset[, sum(count)])
#return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat)
View(dt)
dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
View(all_4)
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id, age)]
setnames(all_8, "V1", "8count")
View(all_8)
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id, age)]
View(all_8)
setnames(all_8, "V1", "count")
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id)]
setnames(all_8, "V1", "count")
View(all_8)
setnames(all_4, "V1", "count")
View(all_8)
View(all_4)
setnames(all_8, "V1", "count_8")
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id)]
setnames(all_8, "V1", "count_8")
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
View(all_4)
View(all_8)
View(all_8)
#to merge into a wide table
countcompare <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
View(countcompare)
ggplot(countcompare)+
geom_point(aes(x = all_8, y = all_4))
View(countcompare)
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4))
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4, color = year))
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4, color = Year))
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4), color = "blue3")
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4), color = "blue3")+
theme_minimal()
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 6, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
return(subset[, sum(count)])
#return(subset)
}
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
#to merge into a wide table
countcompare <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4), color = "blue3")+
theme_minimal()
cor(countcompare$count_8, countcompare$count_4)
cor(countcompare$count_8, countcompare$count_4, na.rm = TRUE)
cor(countcompare$count_8, countcompare$count_4)
cor(countcompare$count_8, countcompare$count_4, na.rm = TRUE)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
return(subset[, sum(count)])
#return(subset)
}
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
#to merge into a wide table
countcompare <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4), color = "blue3")+
theme_minimal()
lm(count_4 ~ count_8, countcompare)
summary(lm(count_4 ~ count_8, countcompare))
