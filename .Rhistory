countcompare[, sample := as.factor(sample)]
#using color to differentiate
(conefig <-
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal())
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count)/8, by = vars]
setnames(all_8, "V1", "count_8")
#to merge into a wide table
countcompare <- merge(all_samples, all_8, by = vars, all.x = TRUE)
countcompare[, sample := as.factor(sample)]
#using color to differentiate
(conefig <-
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal())
#using color to differentiate
(conefig <-
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Average number of cones per quadrat by 8 quadrats", y = "Average number of cones per quadrat by other quadrats")+
theme_minimal())
#file name, figure name, size, units
ggsave("output/samplesizeb.jpeg", conefig, width = 6, height = 4, unit = "in")
#correlation coefficient run by sample size, added r^2 and sample size
correlations <- countcompare[, .(correlation = cor(count_8, other_count, use = "complete.obs"),
r_squared = cor(count_8, other_count, use = "complete.obs")^2,
n = sum(!is.na(count_8))),
by = sample]
#calculate standard errors
correlations[, se_correlation := sqrt((1 - correlation^2) / (n - 2))]
View(correlations)
View(all_4)
#using color to differentiate
(conefig <-
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Average number of cones per quadrat with 8 quadrats", y = "Average number of cones per quadrat with X quadrats", fill = "X")+
theme_minimal())
View(countcompare)
setnames(countcompare, "sample", "X")
View(countcompare)
#correlation coefficient run by sample size, added r^2 and sample size
correlations <- countcompare[, .(correlation = cor(count_8, other_count, use = "complete.obs"),
r_squared = cor(count_8, other_count, use = "complete.obs")^2,
n = sum(!is.na(count_8))),
by = X]
#calculate standard errors
correlations[, se_correlation := sqrt((1 - correlation^2) / (n - 2))]
#using color to differentiate
(conefig <-
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = X), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = X), fill = NA, method = "lm")+
labs(x = "Average number of cones per quadrat with 8 quadrats", y = "Average number of cones per quadrat with X quadrats")+
theme_minimal())
#using color to differentiate
(conefig <-
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = X), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = X), fill = NA, method = "lm")+
labs(x = "Average number of cones per quadrat with 8 quadrats", y = "Average number of cones per quadrat with X quadrats")+
theme_minimal())
#file name, figure name, size, units
ggsave("output/samplesizeb.jpeg", conefig, width = 6, height = 4, unit = "in")
View(correlations)
#file name, figure name, size, units
ggsave("output/samplesizeb.jpeg", conefig, width = 8, height = 6, unit = "in")
View(all_4)
#remove 'sample' column from all_4
all_4[, sample := NULL]
setnames(all_4, "other_count", "count_4")
View(all_4)
View(all_8)
#merge count_4 and count_8
countcompare4_8 <- merge(all_4, all_8, by = vars, all.x = TRUE)
countcompare4_8[, Year := as.factor(Year)]
View(countcompare4_8)
#using colour to differentiate by year
(conefig2 <-
ggplot(countcompare4_8)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = count_4, color = Year), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = count_4, color = Year), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Cone count with 4 quadrats")+
theme_minimal())
#using colour to differentiate by year
(conefig2 <-
ggplot(countcompare4_8)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = count_4, color = Year), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = count_4, color = Year), fill = NA, method = "lm")+
labs(x = "Average number of cones per quadrat with 8 quadrats", y = "Average number of cones per quadrat with 4 quadrats")+
theme_minimal())
ggsave("output/4_8_by_year.jpeg", conefig2, width = 8, height = 6, unit = "in")
#correlation between 4 and 8 by year
correlations_48_by_year <- countcompare4_8[, .(correlation = cor(count_8, count_4, use = "complete.obs"),
r_squared = cor(count_8, count_4, use = "complete.obs")^2,
n = sum(!is.na(count_8))),
by = Year]
#calculate standard errors
correlations_48_by_year[, se_correlation := sqrt((1 - correlation^2) / (n - 2))]
View(correlations_48_by_year)
#setting up quickcount correlation data table
columns_to_extract <- c("Year", "midden", "squirrel_id", "CA1")
quickcount <- dat[, ..columns_to_extract, with = FALSE]
setnames(quickcount, "CA1", "quick_count")
View(quickcount)
#remove NAs from quick count
quickcount <- quickcount[!is.na(quick_count)]
View(quickcount)
View(dat)
View(dat)
quickcount <- quickcount[complete.cases(quickcount)]
View(quickcount)
View(countcompare)
#remove NAs from quick count
quickcount <- quickcount[!is.na(quick_count)]
print(quickcount)
View(quickcount)
str(quickcount)
#remove NAs from quick count
quickcount[, quick_count := as.numeric(quick_count)]
quickcount <- quickcount[!is.na(quick_count)]
View(quickcount)
View(all_4)
View(all_8)
#separate count and sample
all_8 <- all_8 %>%
separate(count_8, into = c("count", "X"), sep = "(?<=\\d)(?=[A-Za-z])")
View(all_8)
#separate count and sample
all_8 <- all_8 %>%
separate(count_8, into = c("count", "X"), sep = "(?<=\\d)(?=[A-Za-z])")
#separate count and sample
all_8 <- all_8 %>%
separate(count_8, into = c("count", "sample"), sep = "(?<=\\d)(?=[A-Za-z])")
View(all_8)
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count)/8, by = vars]
setnames(all_8, "V1", "count_8")
View(all_8)
#separate count and sample
all_8 <- all_8 %>%
separate(count_8, into = c("count", "sample"), sep = "(?<=\\d)(?=[A-Za-z])")
View(all_8)
all_8[, sample := 8]
View(all_8)
#separate count and sample
all_8 <- all_8 %>%
separate(count_8, into = c("count", "X"), sep = "(?<=\\d)(?=[A-Za-z])")
all_8[, X := 8]
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count)/8, by = vars]
setnames(all_8, "V1", "count_8")
#separate count and sample
all_8 <- all_8 %>%
separate(count_8, into = c("count", "X"), sep = "(?<=\\d)(?=[A-Za-z])")
all_8[, X := 8]
View(all_8)
l
l
all_4 <- all_4 %>%
separate(count_4, into = c("count", "X"), sep = "(?<=\\d)(?=[A-Za-z])")
all_4[, X := 4]
View(all_4)
#rbind count 8 and 4 by sample
count8_4 <- rbind(all_4, all_8)
View(count8_4)
#now merge with quick count
quickcount8_4 <- merge(count8_4, quickcount, by = vars, all.x = TRUE)
quickcount8_4$count <- as.numeric(quickcount8_4$count)
quickcount8_4$quick_count <- as.numeric(quickcount8_4$quick_count)
View(quickcount8_4)
str(quickcount8_4)
#create a figure for quick count by 4 and 8 quadrats
(conefig3 <-
ggplot(quickcount8_4)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = quick_count, y = count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = quick_count, y = count, color = sample), fill = NA, method = "lm")+
labs(x = "Quick count", y = "Quadrat count")+
theme_minimal())
#create a figure for quick count by 4 and 8 quadrats
(conefig3 <-
ggplot(quickcount8_4)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = quick_count, y = count, color = X), size = 3, alpha = .3)+
geom_smooth(aes(x = quick_count, y = count, color = X), fill = NA, method = "lm")+
labs(x = "Quick count", y = "Average number of cones per quadrat by X quadrat")+
theme_minimal())
#create a figure for quick count by 4 and 8 quadrats
(conefig3 <-
ggplot(quickcount8_4)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = quick_count, y = count, color = X), size = 3, alpha = .3)+
geom_smooth(aes(x = quick_count, y = count, color = X), fill = NA, method = "lm")+
labs(x = "Quick count", y = "Average number of cones per quadrat with X quadrats")+
theme_minimal())
ggsave("output/quickcount_4_8.jpeg", conefig3, width = 6, height = 4, unit = "in")
#correlation between quick count and quadrat sample
quickcountcorrelations <- quickcount8_4[, .(correlation = cor(count, quick_count, use = "complete.obs"),
r_squared = cor(count, quick_count, use = "complete.obs")^2,
n = sum(!is.na(count))),
by = X]
quickcountcorrelations[, se_correlation := sqrt((1 - correlation^2) / (n - 2))]
View(quickcountcorrelations)
ggsave("output/quickcount_4_8.jpeg", conefig3, width = 8, height = 6, unit = "in")
View(count8_4)
str(count8_4)
#Total count --------------------------------------------------------------
dat[, midden_area := (pi * Length/2 * Width/2)]
View(dat)
columns_to_extract <- c("Year", "midden", "squirrel_id", "CA1", "midden_area")
total_count <- dat[, ..columns_to_extract, with = FALSE]
setnames(total_count, "CA1", "quick_count")
View(total_count)
total_count_area <- merge(total_count, count8_4, by = vars, all.x = TRUE)
total_count_area[, count := NULL]
View(total_count_area)
str(total_count_area)
total_count_area <- total_count_area[!is.na(midden_area)]
View(total_count_area)
total_count_area <- total_count_area[!is.na(total_count$midden_area), ]
total_count_area[, total_cones := midden_area * average_cones]
total_count_area <- merge(total_count, count8_4, by = vars, all.x = TRUE)
View(total_count_area)
total_count_area[, total_cones := midden_area * count]
str(total_count_area)
total_count_areal[, count := as.numeric(count)]
total_count_area[, count := as.numeric(count)]
total_count_area[, total_cones := midden_area * count]
View(total_count_area)
total_count_area[, quick_count := as.numeric(quick_count)]
total_count_area <- total_count_area[!is.na(quick_count)]
View(total_count_area)
(conefig4 <-
ggplot(total_count_area)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = quick_count, y = total_cones, color = X), size = 3, alpha = .3)+
geom_smooth(aes(x = quick_count, y = total_cones, color = X), fill = NA, method = "lm")+
labs(x = "Quick count", y = "Total cones on the midden")+
theme_minimal())
#Total count --------------------------------------------------------------
dat[, midden_area := (pi * (Length/2) * (Width/2))]
columns_to_extract <- c("Year", "midden", "squirrel_id", "CA1", "midden_area")
total_count <- dat[, ..columns_to_extract, with = FALSE]
setnames(total_count, "CA1", "quick_count")
total_count_area <- merge(total_count, count8_4, by = vars, all.x = TRUE)
total_count_area[, count := as.numeric(count)]
total_count_area[, total_cones := midden_area * count]
View(total_count_area)
total_count_area[, quick_count := as.numeric(quick_count)]
total_count_area <- total_count_area[!is.na(quick_count)]
View(total_count_area)
total_count_area[, total_cones := midden_area * count/120]
View(total_count_area)
total_count_area[, total_cones := midden_area * (count/120)]
View(total_count_area)
total_count_area[, total_cones := (midden_area * (count/120))]
View(total_count_area)
library(data.table)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyr)
#data.table syntax
## DT[with i, do j, by group]
dat <- fread("input/MiddenConeCounts.csv")
View(dat)
#get rid of totals columns
dat[, grep("total", names(dat)) := NULL ]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#classify all cone cols to be numeric
dat <- dat %>% as.data.table(mutate_at(conecols, as.numeric))
#examples of how to explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
#remove weird NAs from grid column
dat <- dat[!gr == ""]
#create a midden ID by pasting grid and ref location
dat[, midden := paste0(gr, "_", reflo)]
#classify year as numeric
dat[, Year := as.numeric(Year)]
View(dat)
#melt down all cone count columns by the quadrat. Value is the cone count
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
#subset the melted data to just columns of interest
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
#make age of cones its own column by splitting from quadrat column
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
#remove age from quadrat name
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
#set order of subset data to by by midden then year
dt <- setorder(dt, midden, Year)
View(dt)
#create list of midden things
vars <- c("Year", "midden", "squirrel_id")
dt[, Year := as.numeric(Year)]
dt[, count := as.numeric(count)]
#remove NAs from dt counts
dt <- dt[!is.na(count)]
#make sure there are no remaining NAs
na_rows <- dt[is.na(count)]
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count)/8, by = vars]
setnames(all_8, "V1", "count_8")
View(dat)
View(meltdat)
#subset the melted data to just columns of interest
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count, CA1)]
#make age of cones its own column by splitting from quadrat column
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
#remove age from quadrat name
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
#set order of subset data to by by midden then year
dt <- setorder(dt, midden, Year)
dt[, Year := as.numeric(Year)]
dt[, count := as.numeric(count)]
#remove NAs from dt counts
dt <- dt[!is.na(count)]
#make sure there are no remaining NAs
na_rows <- dt[is.na(count)]
# sample ------------------------------------------------------------------
#create list of by's
vars <- c("Year", "midden", "squirrel_id")
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count)/8, by = vars]
setnames(all_8, "V1", "count_8")
View(dt)
#create list of by's
vars <- c("Year", "midden", "squirrel_id", "CA1")
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count)/8, by = vars]
setnames(all_8, "V1", "count_8")
View(all_8)
ggplot(all_8)+
geom_point(aes(x = CA1, y = count_8))
all_8[is.ma(CA1)]
all_8[is.na(CA1)]
all_8[is.numeric(CA1)]
all_8[, CA1 := as.numeric(CA1)]
all_8[is.na(CA1)]
ggplot(all_8)+
geom_point(aes(x = CA1, y = count_8))
summary(lm(count_8 ~ CA1, all_8))
View(meltdat)
dat[, area := Width*Length]
View(dat)
#melt down all cone count columns by the quadrat. Value is the cone count
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
dat <- fread("input/MiddenConeCounts.csv")
# basic cleaning and investigating ----------------------------------------
#get rid of totals columns
dat[, grep("total", names(dat)) := NULL ]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#classify all cone cols to be numeric
dat <- dat %>% as.data.table(mutate_at(conecols, as.numeric))
#examples of how to explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
#remove weird NAs from grid column
dat <- dat[!gr == ""]
#create a midden ID by pasting grid and ref location
dat[, midden := paste0(gr, "_", reflo)]
#classify year as numeric
dat[, Year := as.numeric(Year)]
dat[, area := Width*Length]
# create new data frame ---------------------------------------------------
#melt down all cone count columns by the quadrat. Value is the cone count
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
#subset the melted data to just columns of interest
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count, CA1, area)]
#make age of cones its own column by splitting from quadrat column
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
#remove age from quadrat name
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
#set order of subset data to by by midden then year
dt <- setorder(dt, midden, Year)
dt[, Year := as.numeric(Year)]
dt[, count := as.numeric(count)]
#remove NAs from dt counts
dt <- dt[!is.na(count)]
#make sure there are no remaining NAs
na_rows <- dt[is.na(count)]
# sample ------------------------------------------------------------------
#create list of by's
vars <- c("Year", "midden", "squirrel_id", "CA1", "area")
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count)/8, by = vars]
setnames(all_8, "V1", "count_8")
View(all_8)
View(dt)
ggplot(all_8)+
geom_point(aes(x = area, y = count_8))
ggplot(all_8)+
geom_point(aes(x = area, y = CA1))
all_8[, CA1 := as.numeric(CA1)]
ggplot(all_8)+
geom_point(aes(x = area, y = CA1))
summary(lm(area ~ CA1, all_8))
all_8[, total_cone := area*count_8]
ggplot(all_8)+
geom_point(aes(x = CA1, y = total_cone))
summary(lm(CA1 ~ total_cone, all_8))
View(all_8)
ggplot(all_8)+
geom_point(aes(x = count_8, y = area))
ggplot(all_8)+
geom_point(aes(x = area, y = count_8))
ggplot(all_8)+
geom_point(aes(x = total_cones, y = count_8))
ggplot(all_8)+
geom_point(aes(x = total_cone, y = count_8))
summary(lm(count_8 ~ total_cone, all_8))
ggplot(all_8)+
geom_point(aes(x = area, y = total_cone))
summary(lm(total_cone ~ area, all_8))
summary(lm(total_cone ~ area + count_8, all_8))
summary(lm(total_cone ~ count_8, all_8))
suummary(lm(total_cone ~ CA1, all_8))
summary(lm(total_cone ~ CA1, all_8))
ggplot(all_8)+
geom_point(aes(x = CA1, y = total_cone))
stan1 <- ggplot(all_8)+
geom_point(aes(x = CA1, y = total_cone))
summary(lm(total_cone ~ CA1, all_8))
ggsave("output/figure_for_stan.jpeg", stan1, width = 5, height = 4, unit = "in")
summary(lm(total_cone ~ CA1, all_8))
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, .(count_8 = sum(count)/8), by = vars]
library(data.table)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyr)
#data.table syntax
## DT[with i, do j, by group]
dat <- fread("input/MiddenConeCounts.csv")
# basic cleaning and investigating ----------------------------------------
#get rid of totals columns
dat[, grep("total", names(dat)) := NULL ]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#classify all cone cols to be numeric
dat <- dat %>% as.data.table(mutate_at(conecols, as.numeric))
#examples of how to explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
#remove weird NAs from grid column
dat <- dat[!gr == ""]
#create a midden ID by pasting grid and ref location
dat[, midden := paste0(gr, "_", reflo)]
#classify year as numeric
dat[, Year := as.numeric(Year)]
dat[, area := Width*Length]
# create new data frame ---------------------------------------------------
#melt down all cone count columns by the quadrat. Value is the cone count
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
#subset the melted data to just columns of interest
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count, CA1, area)]
#make age of cones its own column by splitting from quadrat column
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
#remove age from quadrat name
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
#set order of subset data to by by midden then year
dt <- setorder(dt, midden, Year)
dt[, Year := as.numeric(Year)]
dt[, count := as.numeric(count)]
#remove NAs from dt counts
dt <- dt[!is.na(count)]
#make sure there are no remaining NAs
na_rows <- dt[is.na(count)]
# sample ------------------------------------------------------------------
#create list of by's
vars <- c("Year", "midden", "squirrel_id", "CA1", "area")
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, .(count_8 = sum(count)/8), by = vars]
View(all_8)
all_8[, CA1 := as.numeric(CA1)]
all_8[, total_cone := area*count_8]
summary(lm(total_cone ~ CA1, all_8))
stan1 <- ggplot(all_8)+
geom_point(aes(x = CA1, y = total_cone))
