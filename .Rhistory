samplequads <- sample(quads, 6, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
return(subset[, sum(count)])
#return(subset)
}
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
#to merge into a wide table
countcompare <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4), color = "blue3")+
theme_minimal()
cor(countcompare$count_8, countcompare$count_4)
cor(countcompare$count_8, countcompare$count_4, na.rm = TRUE)
cor(countcompare$count_8, countcompare$count_4)
cor(countcompare$count_8, countcompare$count_4, na.rm = TRUE)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
return(subset[, sum(count)])
#return(subset)
}
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
#to merge into a wide table
countcompare <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4), color = "blue3")+
theme_minimal()
lm(count_4 ~ count_8, countcompare)
summary(lm(count_4 ~ count_8, countcompare))
library(data.table)
library(ggplot2)
library(dplyr)
library(lubridate)
#data.table syntax
## DT[with i, do j, by group]
dat <- fread("input/MiddenConeCounts.csv")
# basic cleaning and investigating ----------------------------------------
#get rid of totals columns
dat[, grep("total", names(dat)) := NULL ]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#classify all cone cols to be numeric
dat <- dat %>% mutate_at(conecols, as.numeric)
#examples of how to explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
#remove weird NAs from grid column
dat <- dat[!gr == ""]
#create a midden ID by pasting grid and ref location
dat[, midden := paste0(gr, "_", reflo)]
#classify year as numeric
dat[, Year := as.numeric(Year)]
# create new data frame ---------------------------------------------------
#melt down all cone count columns by the quadrat. Value is the cone count
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
#subset the melted data to just columns of interest
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
#make age of cones its own column by splitting from quadrat column
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
#remove age from quadrat name
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
#set order of subset data to by by midden then year
dt <- setorder(dt, midden, Year)
# sample ------------------------------------------------------------------
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id)]
setnames(all_8, "V1", "count_8")
#
# testmid <- sample(dt$midden, 1)
# test <- dt[midden %in% testmid]
#
#
#
# quads <- test[, unique(quadrat)]
#
# samplequads <- sample(quads, 4, replace = FALSE)
#
# test2 <- test[quadrat %in% samplequads]
#
# test2[, sum(count)]
#
# test[, sum(count)]
#function that randomly samples 4 quadrats
randomcount4 <- function(cd, samplecol){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 4 of these quadrat names randomly
samplequads <- sample(quads, 4, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[samplecol %in% samplequads]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
#if you want to merge into a long table use rbind
#to merge into a wide table
countcompare <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
#ggplot 4 count against 8 count
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4), color = "blue3")+
theme_minimal()
cor(countcompare$count_8, countcompare$count_4)
View(countcompare)
setnames(countcompare, "count_4", "other_count")
countcompare[, sample := 4]
View(countcompare)
View(all_4)
#function that randomly samples 4 quadrats
randomcount4 <- function(cd, samplecol){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 4 of these quadrat names randomly
samplequads <- sample(quads, 4, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[samplecol %in% samplequads]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
View(all_4)
View(all_4)
#function that randomly samples 4 quadrats
randomcount4 <- function(cd, samplecol, numb){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 4 of these quadrat names randomly
samplenumb <- sample(quads, 4, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[samplecol %in% samplenumb]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat, numb = 4), by = .(Year, midden, squirrel_id)]
View(all_4)
setnames(all_4, "V1", "count_4")
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat, numb = 4), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "other_count")
all_4[, sample := 4]
View(all_4)
#function that randomly samples 4 quadrats
randomcount4 <- function(cd, samplecol, numb){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 4 of these quadrat names randomly
samplenumb <- sample(quads, numb, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[samplecol %in% samplenumb]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat, numb = 4), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "other_count")
all_4[, sample := 4]
View(all_4)
#function that randomly samples 4 quadrats
randomcount <- function(cd, samplecol, numb){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 4 of these quadrat names randomly
samplenumb <- sample(quads, numb, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[samplecol %in% samplenumb]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 4), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "other_count")
all_4[, sample := 4]
all_5 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 5), by = .(Year, midden, squirrel_id)]
setnames(all_5, "V1", "other_count")
all_5[, sample := 5]
all_6 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 6), by = .(Year, midden, squirrel_id)]
setnames(all_6, "V1", "other_count")
all_6[, sample := 6]
all_7 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 7), by = .(Year, midden, squirrel_id)]
setnames(all_7, "V1", "other_count")
all_7[, sample := 7]
all_samples <- rbind(all_4, all_5)
View(all_samples)
all_samples <- rbind(all_4, all_5, all_6, all_7)
View(all_samples)
View(all_8)
View(all_samples)
View(all_8)
#create list of midden things
split_by := c("Year", "midden", "squirrel_id")
#create list of midden things
split_by <- c("Year", "midden", "squirrel_id")
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count), by = split_by]
View(all_8)
#create list of midden things
fuck <- c("Year", "midden", "squirrel_id")
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count), by = fuck]
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count), by = fuck]
View(all_8)
setnames(all_8, "V1", "count_8")
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 4), by = fuck]
setnames(all_4, "V1", "other_count")
all_4[, sample := 4]
View(all_4)
#create list of midden things
vars <- c("Year", "midden", "squirrel_id")
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count), by = vars]
setnames(all_8, "V1", "count_8")
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 4), by = vars]
setnames(all_4, "V1", "other_count")
all_4[, sample := 4]
all_5 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 5), by = vars]
setnames(all_5, "V1", "other_count")
all_5[, sample := 5]
all_6 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 6), by = vars]
setnames(all_6, "V1", "other_count")
all_6[, sample := 6]
all_7 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 7), by = vars]
setnames(all_7, "V1", "other_count")
all_7[, sample := 7]
all_samples <- rbind(all_4, all_5, all_6, all_7)
View(all_samples)
#to merge into a wide table
countcompare <- merge(all_samples, all_8, by = vars, all.x = TRUE)
View(countcompare)
str(countcompare)
countcompare[, sample := as.integer(sample)]
View(countcompare)
View(all_samples)
#ggplot 4 count against 8 count
ggplot(countcompare)+
geom_point(aes(x = count_8, y = other_count, color = sample))+
theme_minimal()
countcompare[, sample := as.factor(sample)]
#ggplot 4 count against 8 count
ggplot(countcompare)+
geom_point(aes(x = count_8, y = other_count, color = sample))+
theme_minimal()
#ggplot 4 count against 8 count
ggplot(countcompare)+
gem_line(aes(x = count_8, y = other_count, color = sample))+
theme_minimal()
#ggplot 4 count against 8 count
ggplot(countcompare)+
geom_line(aes(x = count_8, y = other_count, color = sample))+
theme_minimal()
#ggplot 4 count against 8 count
ggplot(countcompare)+
geom_smooth(aes(x = count_8, y = other_count, color = sample))+
theme_minimal()
#ggplot 4 count against 8 count
ggplot(countcompare)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), stat = "lm")+
theme_minimal()
#ggplot 4 count against 8 count
ggplot(countcompare)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), method = "lm")+
theme_minimal()
mod <- lm(count_8 ~ other_count, data = countcompare[sample == 4])
countcompare[sample == 4]
View(mod)
summary(mod)
output <- as.data.table(ggpredict(mod, terms = c("other_count")))
output <- as.data.table(ggeffects::ggpredict(mod, terms = c("other_count")))
View(output)
output <- as.data.table(ggeffects::ggpredict(mod, terms = "other_count"))
#ggplot 4 count against 8 count
ggplot(countcompare)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), method = "lm")+
theme_minimal()
mod <- lm(other_count ~ count_8, data = countcompare[sample == 4])
output <- as.data.table(ggeffects::ggpredict(mod, terms = "count_8"))
View(output)
ggplot(countcompare)+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 2)+
theme_minimal()
ggplot(countcompare)+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3)+
theme_minimal()
ggplot(countcompare)+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .5)+
theme_minimal()
ggplot(countcompare)+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .5)+
geom_abline(intercept = 0, slope = 1)+
theme_minimal()
ggplot(countcompare)+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .5)+
geom_abline(intercept = 0, slope = 1, linetype = 3)+
theme_minimal()
ggplot(countcompare)+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .5)+
geom_abline(intercept = 0, slope = 1, linetype = 3, linewidth = 2)+
theme_minimal()
ggplot(countcompare)+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .5)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2)+
theme_minimal()
ggplot(countcompare)+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .5)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .5)+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .7)+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
theme_minimal()
#ggplot 4 count against 8 count
ggplot(countcompare)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
theme_minimal()
countcompare[, cor(count_8, other_count), by = sample]
countcompare[, cor(count_8, other_count, na.rm = TRUE), by = sample]
countcompare[, cor(count_8, other_count)]
countcompare[, cor(count_8, other_count, na.rm = FALSE)]
cor.test(countcompare$count_8, countcompare$other_count)
countcompare[, cor.test(count_8, other_count)]
countcompare[, cor.test(count_8, other_count), by = sample]
countcompare[, cor(count_8, other_count), by = sample]
countcompare[, cor(count_8, other_count,  use = "complete.obs"), by = sample]
countcompare[, cor(count_8, other_count, use = "complete.obs"), by = sample]
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count 8 quad", y = "Other cone count")+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count 8 quad", y = "Other cone count")+
xlim(0, 300)+
ylim(0, 300)+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count 8 quad", y = "Other cone count")+
xlim(0, 3000)+
ylim(0, 3000)+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count 8 quad", y = "Other cone count")+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count), fill = NA, method = "lm")+
labs(x = "Cone count 8 quad", y = "Other cone count")+
facet_wrap(~sample)+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count), fill = NA, method = "lm")+
labs(x = "Cone count 8 quad", y = "Other cone count")+
facet_wrap(~sample, scales = "fixed")+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count), fill = NA, method = "lm")+
labs(x = "Cone count 8 quad", y = "Other cone count")+
facet_wrap(~sample, scales = "free")+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count), fill = NA, method = "lm")+
labs(x = "Cone count 8 quad", y = "Other cone count")+
facet_wrap(~sample, scales = "fixed")+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
facet_wrap(~sample, scales = "fixed")+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count), color = "skyblue" size = 3, alpha = .3)+
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count), color = "skyblue", size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
facet_wrap(~sample, scales = "fixed")+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count), color = "blue", size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
facet_wrap(~sample, scales = "fixed")+
theme_minimal()
sample_cols <- c("4" = "blue4", "5" = "orange", "6" = "green4", "7" = "red4")
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
scale_color_manual(values = sample_cols)+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
scale_color_manual(values = sample_cols)+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
scale_color_manual(values = sample_cols)+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal()
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal()
conefig <-
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal()
conefig
(conefig <-
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal())
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal()
conefig <-
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal()
conefig
(conefig <-
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal())
#file name, figure name, size, units
ggsave("output/samplesize.jpeg", conefig, width = 6, height = 4, unit = "in")
#file name, figure name, size, units
ggsave("output/samplesize.jpeg", conefig, width = 6, height = 10, unit = "in")
#file name, figure name, size, units
ggsave("output/samplesize.jpeg", conefig, width = 6, height = 4, unit = "in")
#correlation coefficient run by sample size
countcompare[, cor(count_8, other_count, use = "complete.obs"), by = sample]
#correlation coefficient run by sample size
correlations <- countcompare[, cor(count_8, other_count, use = "complete.obs"), by = sample]
View(correlations)
