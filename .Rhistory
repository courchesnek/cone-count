ggplot(quickcount8_4)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = quick_count, y = count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = quick_count, y = count, color = sample), fill = NA, method = "lm")+
labs(x = "Quick count", y = "Quadrat count")+
theme_minimal())
#correlation between quick count and quadrat sample
quickcountcorrelations <- quickcount8_4[, .(correlation = cor(count, quick_count, use = "complete.obs"),
r_squared = cor(count, quick_count, use = "complete.obs")^2,
n = sum(!is.na(count))),
by = sample]
View(quickcountcorrelations)
View(correlations)
View(quickcount8_4)
quickcountcorrelations[, se_correlation := sqrt((1 - correlation^2) / (n - 2))]
View(quickcountcorrelations)
ggsave("output/quickcount_4_8.jpeg", conefig3, width = 6, height = 4, unit = "in")
library(data.table)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyr)
dat <- fread("input/MiddenConeCounts.csv")
# basic cleaning and investigating ----------------------------------------
#get rid of totals columns
dat[, grep("total", names(dat)) := NULL ]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#classify all cone cols to be numeric
dat <- dat %>% as.data.table(mutate_at(conecols, as.numeric))
#examples of how to explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
#remove weird NAs from grid column
dat <- dat[!gr == ""]
#create a midden ID by pasting grid and ref location
dat[, midden := paste0(gr, "_", reflo)]
#classify year as numeric
dat[, Year := as.numeric(Year)]
# create new data frame ---------------------------------------------------
#melt down all cone count columns by the quadrat. Value is the cone count
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
#subset the melted data to just columns of interest
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
#make age of cones its own column by splitting from quadrat column
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
#remove age from quadrat name
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
#set order of subset data to by by midden then year
dt <- setorder(dt, midden, Year)
#create list of midden things
vars <- c("Year", "midden", "squirrel_id")
dt[, Year := as.numeric(Year)]
dt[, count := as.numeric(count)]
#remove NAs from dt counts
dt <- dt[!is.na(count)]
#make sure there are no remaining NAs
na_rows <- dt[is.na(count)]
# sample ------------------------------------------------------------------
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count), by = vars]
setnames(all_8, "V1", "count_8")
#
# testmid <- sample(dt$midden, 1)
# test <- dt[midden %in% testmid]
#
#
#
# quads <- test[, unique(quadrat)]
#
# samplequads <- sample(quads, 4, replace = FALSE)
#
# test2 <- test[quadrat %in% samplequads]
#
# test2[, sum(count)]
#
# test[, sum(count)]
#function that randomly samples 4 quadrats
randomcount <- function(cd, samplecol, numb){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 4 of these quadrat names randomly
samplenumb <- sample(quads, numb, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[samplecol %in% samplenumb]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 4), by = vars]
setnames(all_4, "V1", "other_count")
all_4[, sample := 4]
all_5 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 5), by = vars]
setnames(all_5, "V1", "other_count")
all_5[, sample := 5]
all_6 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 6), by = vars]
setnames(all_6, "V1", "other_count")
all_6[, sample := 6]
all_7 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 7), by = vars]
setnames(all_7, "V1", "other_count")
all_7[, sample := 7]
all_samples <- rbind(all_4, all_5, all_6, all_7)
#to merge into a wide table
countcompare <- merge(all_samples, all_8, by = vars, all.x = TRUE)
countcompare[, sample := as.factor(sample)]
#correlation coefficient run by sample size, added r^2 and sample size
correlations <- countcompare[, .(correlation = cor(count_8, other_count, use = "complete.obs"),
r_squared = cor(count_8, other_count, use = "complete.obs")^2,
n = sum(!is.na(count_8))),
by = sample]
#calculate standard errors
correlations[, se_correlation := sqrt((1 - correlation^2) / (n - 2))]
#using color to differentiate
(conefig <-
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal())
#use facet wrap to differentiate
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count), color = "blue", size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
facet_wrap(~sample, scales = "fixed")+
theme_minimal()
#4 and 8 count by year -------------------------------------------------------------
#remove 'sample' column from all_4
all_4[, sample := NULL]
setnames(all_4, "other_count", "count_4")
#merge count_4 and count_8
countcompare4_8 <- merge(all_4, all_8, by = vars, all.x = TRUE)
countcompare4_8[, Year := as.factor(Year)]
#using colour to differentiate by year
(conefig2 <-
ggplot(countcompare4_8)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = count_4, color = Year), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = count_4, color = Year), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Cone count with 4 quadrats")+
theme_minimal())
#correlation between 4 and 8 by year
correlations_48_by_year <- countcompare4_8[, .(correlation = cor(count_8, count_4, use = "complete.obs"),
r_squared = cor(count_8, count_4, use = "complete.obs")^2,
n = sum(!is.na(count_8))),
by = Year]
#calculate standard errors
correlations_48_by_year[, se_correlation := sqrt((1 - correlation^2) / (n - 2))]
# quick count analysis -----------------------------------------------------------
#setting up quickcount correlation data table
columns_to_extract <- c("Year", "squirrel_id", "CA1", "midden")
quickcount <- dat[, ..columns_to_extract, with = FALSE]
quickcount <- setorder(quickcount, midden, Year)
setnames(quickcount, "CA1", "quick_count")
quick_count <- quickcount$quick_count
new_order <- c("Year", setdiff(names(quickcount), "Year"))
quickcount <- quickcount[, ..new_order, with = FALSE]
#remove NAs from quick count
quickcount <- quickcount[!is.na(quick_count)]
#separate count and sample
all_8 <- all_8 %>%
separate(count_8, into = c("count", "sample"), sep = "(?<=\\d)(?=[A-Za-z])")
all_8[, sample := 8]
all_4 <- all_4 %>%
separate(count_4, into = c("count", "sample"), sep = "(?<=\\d)(?=[A-Za-z])")
all_4[, sample := 4]
#rbind count 8 and 4 by sample
count8_4 <- rbind(all_4, all_8)
#now merge with quick count
quickcount8_4 <- merge(count8_4, quickcount, by = vars, all.x = TRUE)
quickcount8_4$count <- as.numeric(quickcount8_4$count)
quickcount8_4$quick_count <- as.numeric(quickcount8_4$quick_count)
#correlation between quick count and quadrat sample
quickcountcorrelations <- quickcount8_4[, .(correlation = cor(count, quick_count, use = "complete.obs"),
r_squared = cor(count, quick_count, use = "complete.obs")^2,
n = sum(!is.na(count))),
by = sample]
quickcountcorrelations[, se_correlation := sqrt((1 - correlation^2) / (n - 2))]
#create a figure for quick count by 4 and 8 quadrats
(conefig3 <-
ggplot(quickcount8_4)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = quick_count, y = count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = quick_count, y = count, color = sample), fill = NA, method = "lm")+
labs(x = "Quick count", y = "Quadrat count")+
theme_minimal())
View(dt)
View(dat)
#Total count --------------------------------------------------------------
dat$midden_area <- pi * dat$length * dat$width
#Total count --------------------------------------------------------------
dat$midden_area <- pi * dat$Width * dat$Length
View(dat)
View(dt)
View(all_8)
View(count8_4)
count8_4$average_cones <- df$count / df$sample
str(count8_4)
count8_4[, count := as.numeric(count)]
count8_4[, sample := as.numeric(count)]
count8_4$average_cones <- df$count / df$sample
str(count8_4)
count8_4$average_cones <- df$count / df$sample
count8_4$average_cones <- count8_4$count / count8_4$sample
View(count8_4)
str(count8_4)
count8_4[, sample := as.character(sample)]
str(count8_4)
View(count8_4)
View(count8_4)
#rbind count 8 and 4 by sample
count8_4 <- rbind(all_4, all_8)
View(count8_4)
count8_4[, count := as.numeric(count)]
count8_4$average_cones <- df$count / df$sample
count8_4[, sample := as.factor(sample)]
View(count8_4)
count8_4$average_cones <- df$count / df$sample
View(count8_4)
count8_4$average_cones <- count8_4$count / count8_4$sample
View(count8_4)
count8_4[, sample := as.character(sample)]
count8_4$average_cones <- count8_4$count / count8_4$sample
View(count8_4)
count8_4$average_cones <- count8_4$count / as.numeric(count8_4$sample)
View(count8_4)
columns_to_extract <- c("Year", "midden", "squirrel_id", "CA1", "midden_area")
total_count <- dat[, ..columns_to_extract, with = FALSE]
setnames(total_count, "CA1", "quick_count")
View(total_count)
total_count_area <- merge(total_count, count8_4, by = vars, all.x = TRUE)
View(total_count_area)
total_count_area[, count := NULL]
View(total_count_area)
total_count_area[, total_cones := midden_area * average_cones]
View(total_count_area)
total_count_area[, midden_area, average_cones := NULL]
total_count_area[, "midden_area", "average_cones" := NULL]
total_count_area[, midden_area := NULL]
total_count_area[, average_cones := NULL]
View(total_count_area)
(conefig4 <-
ggplot(total_count_area)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = quick_count, y = total_cones, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = quick_count, y = total_cones, color = sample), fill = NA, method = "lm")+
labs(x = "Quick count", y = "Total cones")+
theme_minimal())
total_count_area <- total_count_area[!total_cones == ""]
(conefig4 <-
ggplot(total_count_area)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = quick_count, y = total_cones, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = quick_count, y = total_cones, color = sample), fill = NA, method = "lm")+
labs(x = "Quick count", y = "Total cones")+
theme_minimal())
total_count_area <- total_count_area[!quick_count == ""]
View(total_count_area)
(conefig4 <-
ggplot(total_count_area)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = quick_count, y = total_cones, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = quick_count, y = total_cones, color = sample), fill = NA, method = "lm")+
labs(x = "Quick count", y = "Total cones")+
theme_minimal())
total_count_area <- na.omit(total_count_area)
View(total_count_area)
total_count_area[, quick_count := na.omit(quick_count)]
View(total_count_area)
#remove NAs from quick count
quickcount <- quickcount[!is.na(quick_count)]
View(quickcount)
library(data.table)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyr)
dat <- fread("input/MiddenConeCounts.csv")
# basic cleaning and investigating ----------------------------------------
#get rid of totals columns
dat[, grep("total", names(dat)) := NULL ]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#classify all cone cols to be numeric
dat <- dat %>% as.data.table(mutate_at(conecols, as.numeric))
#examples of how to explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
#remove weird NAs from grid column
dat <- dat[!gr == ""]
#create a midden ID by pasting grid and ref location
dat[, midden := paste0(gr, "_", reflo)]
#classify year as numeric
dat[, Year := as.numeric(Year)]
# create new data frame ---------------------------------------------------
#melt down all cone count columns by the quadrat. Value is the cone count
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
#subset the melted data to just columns of interest
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
#make age of cones its own column by splitting from quadrat column
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
#remove age from quadrat name
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
#set order of subset data to by by midden then year
dt <- setorder(dt, midden, Year)
#create list of midden things
vars <- c("Year", "midden", "squirrel_id")
dt[, Year := as.numeric(Year)]
dt[, count := as.numeric(count)]
#remove NAs from dt counts
dt <- dt[!is.na(count)]
#make sure there are no remaining NAs
na_rows <- dt[is.na(count)]
# sample ------------------------------------------------------------------
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count), by = vars]
setnames(all_8, "V1", "count_8")
#
# testmid <- sample(dt$midden, 1)
# test <- dt[midden %in% testmid]
#
#
#
# quads <- test[, unique(quadrat)]
#
# samplequads <- sample(quads, 4, replace = FALSE)
#
# test2 <- test[quadrat %in% samplequads]
#
# test2[, sum(count)]
#
# test[, sum(count)]
#function that randomly samples 4 quadrats
randomcount <- function(cd, samplecol, numb){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 4 of these quadrat names randomly
samplenumb <- sample(quads, numb, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[samplecol %in% samplenumb]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 4), by = vars]
setnames(all_4, "V1", "other_count")
all_4[, sample := 4]
all_5 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 5), by = vars]
setnames(all_5, "V1", "other_count")
all_5[, sample := 5]
all_6 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 6), by = vars]
setnames(all_6, "V1", "other_count")
all_6[, sample := 6]
all_7 <- dt[, randomcount(cd = .SD, samplecol = quadrat, numb = 7), by = vars]
setnames(all_7, "V1", "other_count")
all_7[, sample := 7]
all_samples <- rbind(all_4, all_5, all_6, all_7)
#to merge into a wide table
countcompare <- merge(all_samples, all_8, by = vars, all.x = TRUE)
countcompare[, sample := as.factor(sample)]
#correlation coefficient run by sample size, added r^2 and sample size
correlations <- countcompare[, .(correlation = cor(count_8, other_count, use = "complete.obs"),
r_squared = cor(count_8, other_count, use = "complete.obs")^2,
n = sum(!is.na(count_8))),
by = sample]
#calculate standard errors
correlations[, se_correlation := sqrt((1 - correlation^2) / (n - 2))]
#using color to differentiate
(conefig <-
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count, color = sample), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
theme_minimal())
#use facet wrap to differentiate
ggplot(countcompare)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = other_count), color = "blue", size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = other_count), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Other cone count")+
facet_wrap(~sample, scales = "fixed")+
theme_minimal()
#4 and 8 count by year -------------------------------------------------------------
#remove 'sample' column from all_4
all_4[, sample := NULL]
setnames(all_4, "other_count", "count_4")
#merge count_4 and count_8
countcompare4_8 <- merge(all_4, all_8, by = vars, all.x = TRUE)
countcompare4_8[, Year := as.factor(Year)]
#using colour to differentiate by year
(conefig2 <-
ggplot(countcompare4_8)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = count_8, y = count_4, color = Year), size = 3, alpha = .3)+
geom_smooth(aes(x = count_8, y = count_4, color = Year), fill = NA, method = "lm")+
labs(x = "Cone count with 8 quadrats", y = "Cone count with 4 quadrats")+
theme_minimal())
#correlation between 4 and 8 by year
correlations_48_by_year <- countcompare4_8[, .(correlation = cor(count_8, count_4, use = "complete.obs"),
r_squared = cor(count_8, count_4, use = "complete.obs")^2,
n = sum(!is.na(count_8))),
by = Year]
#calculate standard errors
correlations_48_by_year[, se_correlation := sqrt((1 - correlation^2) / (n - 2))]
# quick count analysis -----------------------------------------------------------
#setting up quickcount correlation data table
columns_to_extract <- c("Year", "squirrel_id", "CA1", "midden")
quickcount <- dat[, ..columns_to_extract, with = FALSE]
quickcount <- setorder(quickcount, midden, Year)
setnames(quickcount, "CA1", "quick_count")
quick_count <- quickcount$quick_count
new_order <- c("Year", setdiff(names(quickcount), "Year"))
quickcount <- quickcount[, ..new_order, with = FALSE]
#remove NAs from quick count
quickcount <- quickcount[!is.na(quick_count)]
#separate count and sample
all_8 <- all_8 %>%
separate(count_8, into = c("count", "sample"), sep = "(?<=\\d)(?=[A-Za-z])")
all_8[, sample := 8]
all_4 <- all_4 %>%
separate(count_4, into = c("count", "sample"), sep = "(?<=\\d)(?=[A-Za-z])")
all_4[, sample := 4]
#rbind count 8 and 4 by sample
count8_4 <- rbind(all_4, all_8)
#now merge with quick count
quickcount8_4 <- merge(count8_4, quickcount, by = vars, all.x = TRUE)
quickcount8_4$count <- as.numeric(quickcount8_4$count)
quickcount8_4$quick_count <- as.numeric(quickcount8_4$quick_count)
#correlation between quick count and quadrat sample
quickcountcorrelations <- quickcount8_4[, .(correlation = cor(count, quick_count, use = "complete.obs"),
r_squared = cor(count, quick_count, use = "complete.obs")^2,
n = sum(!is.na(count))),
by = sample]
quickcountcorrelations[, se_correlation := sqrt((1 - correlation^2) / (n - 2))]
#create a figure for quick count by 4 and 8 quadrats
(conefig3 <-
ggplot(quickcount8_4)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = quick_count, y = count, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = quick_count, y = count, color = sample), fill = NA, method = "lm")+
labs(x = "Quick count", y = "Quadrat count")+
theme_minimal())
#Total count --------------------------------------------------------------
dat$midden_area <- pi * dat$Width * dat$Length
count8_4[, count := as.numeric(count)]
count8_4[, sample := as.character(sample)]
count8_4$average_cones <- count8_4$count / as.numeric(count8_4$sample)
columns_to_extract <- c("Year", "midden", "squirrel_id", "CA1", "midden_area")
total_count <- dat[, ..columns_to_extract, with = FALSE]
setnames(total_count, "CA1", "quick_count")
total_count_area <- merge(total_count, count8_4, by = vars, all.x = TRUE)
total_count_area[, count := NULL]
total_count_area[, total_cones := midden_area * average_cones]
total_count_area[, midden_area := NULL]
total_count_area[, average_cones := NULL]
total_count_area <- na.omit(total_count_area)
total_count_area[, quick_count := na.omit(quick_count)]
(conefig4 <-
ggplot(total_count_area)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = quick_count, y = total_cones, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = quick_count, y = total_cones, color = sample), fill = NA, method = "lm")+
labs(x = "Quick count", y = "Total cones")+
theme_minimal())
total_count_area <- na.omit(total_count_area)
total_count_area[, quick_count := na.omit(quick_count)]
View(total_count_area)
#Total count --------------------------------------------------------------
dat$midden_area <- pi * dat$Width/2 * dat$Length/2
#Total count --------------------------------------------------------------
dat$midden_area <- pi * dat$(Width/2) * dat$(Length/2)
#Total count --------------------------------------------------------------
dat$midden_area <- (pi * (Width/2) * (Length/2))
#Total count --------------------------------------------------------------
dat[, midden_area := (pi * length * width) / 4]
#Total count --------------------------------------------------------------
dat[, midden_area := (pi * Length * Width) / 4]
View(dat)
#Total count --------------------------------------------------------------
dat[, midden_area := (pi * Length/2 * Width/2)]
View(dat)
count8_4[, count := as.numeric(count)]
count8_4[, sample := as.character(sample)]
count8_4$average_cones <- count8_4$count / as.numeric(count8_4$sample)
columns_to_extract <- c("Year", "midden", "squirrel_id", "CA1", "midden_area")
total_count <- dat[, ..columns_to_extract, with = FALSE]
setnames(total_count, "CA1", "quick_count")
total_count_area <- merge(total_count, count8_4, by = vars, all.x = TRUE)
total_count_area[, count := NULL]
total_count_area[, total_cones := midden_area * average_cones]
total_count_area[, midden_area := NULL]
total_count_area[, average_cones := NULL]
(conefig4 <-
ggplot(total_count_area)+
geom_abline(intercept = 0, slope = 1, linetype = 2, linewidth = 2, color = "grey40")+
geom_point(aes(x = quick_count, y = total_cones, color = sample), size = 3, alpha = .3)+
geom_smooth(aes(x = quick_count, y = total_cones, color = sample), fill = NA, method = "lm")+
labs(x = "Quick count", y = "Total cones")+
theme_minimal())
View(total_count_area)
total_count_area <- na.omit(total_count_area)
View(total_count_area)
total_count_area <- total_count_area[!is.na(quick_count)]
View(total_count_area)
View(total_count_area)
