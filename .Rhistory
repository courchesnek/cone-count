}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
#subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(samplequads)
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
sumcones <- subset[, sum(countcol)]
return(sumcones)
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset[, sum(countcol)])
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol, countcol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset[, sum(count)])
}
randomcount4(cd = test, samplecol = test$quadrat, countcol = test$count)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset[, sum(count)])
}
randomcount4(cd = test, samplecol = test$quadrat)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
#return(subset[, sum(count)])
return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat)
return(subset[, sum(count)])
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset[, sum(count)])
#return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
return(subset[, sum(count)])
return(subset)
#return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
#return(subset[, sum(count)])
return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat)
View(test)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
#sumcones <- subset[, sum(countcol)]
#return(subset[, sum(count)])
return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
return(subset[, sum(count)])
#return(subset)
}
randomcount4(cd = test, samplecol = test$quadrat)
View(dt)
dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
View(all_4)
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id, age)]
setnames(all_8, "V1", "8count")
View(all_8)
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id, age)]
View(all_8)
setnames(all_8, "V1", "count")
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id)]
setnames(all_8, "V1", "count")
View(all_8)
setnames(all_4, "V1", "count")
View(all_8)
View(all_4)
setnames(all_8, "V1", "count_8")
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id)]
setnames(all_8, "V1", "count_8")
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
View(all_4)
View(all_8)
View(all_8)
#to merge into a wide table
countcompare <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
View(countcompare)
ggplot(countcompare)+
geom_point(aes(x = all_8, y = all_4))
View(countcompare)
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4))
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4, color = year))
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4, color = Year))
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4), color = "blue3")
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4), color = "blue3")+
theme_minimal()
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 6, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
return(subset[, sum(count)])
#return(subset)
}
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
#to merge into a wide table
countcompare <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4), color = "blue3")+
theme_minimal()
cor(countcompare$count_8, countcompare$count_4)
cor(countcompare$count_8, countcompare$count_4, na.rm = TRUE)
cor(countcompare$count_8, countcompare$count_4)
cor(countcompare$count_8, countcompare$count_4, na.rm = TRUE)
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 4, replace = FALSE)
subset <- cd[samplecol %in% samplequads]
return(subset[, sum(count)])
#return(subset)
}
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
#to merge into a wide table
countcompare <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4), color = "blue3")+
theme_minimal()
lm(count_4 ~ count_8, countcompare)
summary(lm(count_4 ~ count_8, countcompare))
library(data.table)
library(ggplot2)
library(dplyr)
library(lubridate)
dat <- fread("input/MiddenConeCounts.csv")
View(dat)
#get rid of totals columns
dat[, grep("total", names(dat)) := NULL ]
View(dat)
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#classify all cone cols to be numeric
dat <- dat %>% mutate_at(conecols, as.numeric)
View(dat)
#remove weird NAs from grid column
dat <- dat[!gr == ""]
#remove weird NAs from grid column
dat <- dat[!gr == ""]
View(dat)
#remove weird NAs from grid column
dat <- dat[!gr == ""]
#remove weird NAs from grid column
dat <- dat[!gr == ""]
#examples of how to explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#remove weird NAs from grid column
dat <- dat[!"gr" == ""]
#remove weird NAs from grid column
dat <- dat[!gr == ""]
View(dat)
dat[, gr]
dat$gr
#remove weird NAs from grid column
dat <- dat[!gr == ""]
dat[, Year]
library(data.table)
dat[, Year]
dat[Year == 2023]
dat[Year == "2023"]
#examples of how to explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat <- fread("input/MiddenConeCounts.csv")
#get rid of totals columns
dat[, grep("total", names(dat)) := NULL ]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#classify all cone cols to be numeric
dat <- dat %>% mutate_at(conecols, as.numeric)
#examples of how to explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
class(dat)
dat <- fread("input/MiddenConeCounts.csv")
#get rid of totals columns
dat[, grep("total", names(dat)) := NULL ]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#classify all cone cols to be numeric
dat <- as.data.table(dat %>% mutate_at(conecols, as.numeric))
class(dat)
#examples of how to explore data
dat[gr == "BT", length(unique(squirrel_id)), Year]
dat[gr == "BT", .N, Year]
#remove weird NAs from grid column
dat <- dat[!gr == ""]
#create a midden ID by pasting grid and ref location
dat[, midden := paste0(gr, "_", reflo)]
#remove weird NAs from grid column
dat <- dat[!gr == ""]
#create a midden ID by pasting grid and ref location
dat[, midden := paste0(gr, "_", reflo)]
#classify year as numeric
dat[, Year := as.numeric(Year)]
#melt down all cone count columns by the quadrat. Value is the cone count
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
#subset the melted data to just columns of interest
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
View(dt)
#make age of cones its own column by splitting from quadrat column
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
#remove age from quadrat name
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
View(dt)
#set order of subset data to by by midden then year
dt <- setorder(dt, midden, Year)
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id)]
setnames(all_8, "V1", "count_8")
View(all_8)
#function that randomly samples 4 quadrats
randomcount4 <- function(cd, samplecol){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 4 of these quadrat names randomly
samplequads <- sample(quads, 4, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[samplecol %in% samplequads]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
View(all_4)
#to merge into a wide table
countcompare <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
View(countcompare)
#function that randomly samples 5 quadrats
randomcount4 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 5, replace = FALSE)
subset <- cd[sample %in% samplequads]
return(subset[, sum(count)])
}
randomcount5 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 5, replace = FALSE)
subset <- cd[sample %in% samplequads]
return(subset[, sum(count)])
#run the function by year, midden, and squirrel id.
all_5 <- dt[, randomcount5(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_5, "V1", "count_5")
#function that randomly samples 5 quadrats
randomcount5 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 5, replace = FALSE)
subset <- cd[sample %in% samplequads]
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_5 <- dt[, randomcount5(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
#sample 4 of these quadrat names randomly
samplequads <- sample(quads, 4, replace = FALSE)
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
#function that randomly samples 5 quadrats
randomcount5 <- function(cd, samplecol){
quads <- cd[, unique(samplecol)]
samplequads <- sample(quads, 5, replace = FALSE)
subset <- cd[sample %in% samplequads]
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_5 <- dt[, randomcount5(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_5, "V1", "count_5")
View(all_4)
View(all_4)
#function that randomly samples 5 quadrats
randomcount5 <- function(cd, samplecol){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 5 of these quadrat names randomly
samplequads <- sample(quads, 5, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[sample %in% samplequads]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#function that randomly samples 5 quadrats
randomcount5 <- function(cd, samplecol){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 5 of these quadrat names randomly
samplequads <- sample(quads, 5, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[sample %in% samplequads]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#function that randomly samples 5 quadrats
randomcount5 <- function(cd, samplecol){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 5 of these quadrat names randomly
samplequads <- sample(quads, 5, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[sample %in% samplequads]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_5 <- dt[, randomcount5(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
#function that randomly samples 5 quadrats
randomcount5 <- function(cd, samplecol){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 5 of these quadrat names randomly
samplequads <- sample(quads, 5, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[sample %in% samplequads]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_5 <- dt[, randomcount5(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
#run the function by year, midden, and squirrel id.
all_5 <- dt[, randomcount5(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
dat <- fread("input/MiddenConeCounts.csv")
dat <- fread("input/MiddenConeCounts.csv")
#get rid of totals columns
dat[, grep("total", names(dat)) := NULL ]
#GRAB ALL COLUMNS WITH OLD AND NEW
conecols <- c(grep("old", names(dat), value = TRUE), grep("new", names(dat), value = TRUE))
#classify all cone cols to be numeric
dat <- as.data.table(dat %>% mutate_at(conecols, as.numeric))
View(dat)
#remove weird NAs from grid column
dat <- dat[!gr == ""]
#create a midden ID by pasting grid and ref location
dat[, midden := paste0(gr, "_", reflo)]
#classify year as numeric
dat[, Year := as.numeric(Year)]
View(dat)
#melt down all cone count columns by the quadrat. Value is the cone count
meltdat <- melt(dat, measure.vars = conecols, value.name = "count", variable.name = "quadrat")
#subset the melted data to just columns of interest
dt <- meltdat[, .(Year, midden, squirrel_id, quadrat, count)]
#make age of cones its own column by splitting from quadrat column
dt[, age := tstrsplit(quadrat, "_", keep = 2)]
#remove age from quadrat name
dt[, quadrat := gsub(c("_old"), c(""), quadrat)]
dt[, quadrat := gsub(c("_new"), c(""), quadrat)]
#set order of subset data to by by midden then year
dt <- setorder(dt, midden, Year)
View(dt)
#sum all cone count data by year, midden and squirrel id
#this combines old and new cones. If you want them separated at 'age' to the by group
all_8 <- dt[, sum(count), by = .(Year, midden, squirrel_id)]
setnames(all_8, "V1", "count_8")
View(all_8)
#function that randomly samples 4 quadrats
randomcount4 <- function(cd, samplecol){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 4 of these quadrat names randomly
samplequads <- sample(quads, 4, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[samplecol %in% samplequads]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_4 <- dt[, randomcount4(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_4, "V1", "count_4")
View(all_4)
#function that randomly samples 5 quadrats
randomcount5 <- function(cd, samplecol){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 5 of these quadrat names randomly
samplequads <- sample(quads, 5, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[sample %in% samplequads]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_5 <- dt[, randomcount5(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
#run the function by year, midden, and squirrel id.
all_5 <- dt[, randomcount5(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
View(randomcount5)
#function that randomly samples 5 quadrats
randomcount5 <- function(cd, samplecol){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 4 of these quadrat names randomly
samplequads <- sample(quads, 5, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[samplecol %in% samplequads]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_5 <- dt[, randomcount5(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_5, "V1", "count_5")
View(all_5)
#function that randomly samples 6 quadrats
randomcount6 <- function(cd, samplecol){
#pull all unique quadrat names from quadrat col
quads <- cd[, unique(samplecol)]
#sample 4 of these quadrat names randomly
samplequads <- sample(quads, 6, replace = FALSE)
#subset the data to only include these four quadrats
subset <- cd[samplecol %in% samplequads]
#return the sum of this data subset. If you want it partitioned by age, do a by = age
return(subset[, sum(count)])
}
#run the function by year, midden, and squirrel id.
all_6 <- dt[, randomcount5(cd = .SD, samplecol = quadrat), by = .(Year, midden, squirrel_id)]
setnames(all_5, "V1", "count_6")
View(all_6)
setnames(all_5, "V1", "count_6")
setnames(all_6, "V1", "count_6")
View(all_6)
#to merge into a wide table
countcompare <- merge(all_8, all_4, all_5, all_6, by = c("Year", "midden", "squirrel_id"))
#to merge into a wide table
countcompare <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
#ggplot 4 count against 8 count
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4), color = "blue3")+
theme_minimal()
View(countcompare)
#to merge into a wide table
countcompare <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
View(countcompare)
#to merge into a wide table
countcompare_8_4 <- merge(all_8, all_4, by = c("Year", "midden", "squirrel_id"))
countcompare_6_5 <- merge(all_6, all_5, by = c("Year", "midden", "squirrel_id"))
countcompare <- merge(countcompare_8_4, countcompare_6_5, by = c("Year", "midden", "squirrel_id"))
View(countcompare)
#ggplot 4 count against 8 count
ggplot(countcompare)+
geom_point(aes(x = count_8, y = count_4))+
theme_minimal()
#ggplot 4 count against 8 count
ggplot(countcompare_8_4)+
geom_point(aes(x = count_8, y = count_4))+
theme_minimal()
